'''
1.自定义函数语法格式：
    def 函数名（参数表）：
        函数体
2.匿名函数--lambda表达式
3.函数参数
    3.1 函数 定义 时的参数称为形参
    3.2 函数 调用 时的参数称为实参
    3.3 位置参数：传入参数的值是按照顺序依次赋值给形参
    3.4 关键字参数：为了避免位置参数严格的位置要求，调用参数时可以指定对应形式参数的名字
    3.5 若同时出现位置，关键字参数，应该先写位置参数再写关键字参数
    3.6 默认参数：若调用方法时没有提供对应形式参数的值，可以指定默认形参的值；若提供了实参，调用时代替掉默认值
    3.7 默认参数值在函数对象被创建时计算
    3.8 数量可变参数：星号将一组可变数量的位置参数集合合成参数值的 元组
    3.9 **将收集参数到字典中
    3.10 当在实参前加*，就意味着将序列拆成一个个单独的实参，称为拆包
4.当实参是不可变对象时，形参值改变不会影响实参
  当实参是可变对象时，形参值改变可能会影响实参
5.如果希望在函数中使用全局变量，而不是创建局部变量，需要用global关键字声明

'''

# g = lambda x,y,z : x+y+z
# print(g(1,2,3))
#
# def f(x,y,z=99):
#     print('x={},y={},z={}'.format(x,y,z))
# #关键字参数
# f(y=1,x=2,z=0)
# #数量可变参数
# def con(a, **b):
#     print(b)
# d = {'one' : 1, 'tow': 2}
# con(1,**d)
#

# #map
# print(list(map(lambda x : x**2,[1,2,3])))
# print(list(map(lambda x, y : x +y,[1,2,3],[3,2,1])))
# #zip 元素个数与最短的列表一致
# a = [1,2,3]
# b = [4,5,6]
# print(list(zip(a,b)))
# #利用zip将字典键值互换
# d = {'a':1, 'b':2, 'c':3}
# d1 = dict(zip(d.values(),d.keys()))
# print(d1)

'''
1.import 模块名：就是执行文件名为模块名的程序
2.from 模块名 import *:引入模块中的所有函数
3.包是一个目录，其中包含一组模块文件和一个init.py文件
    3.1 用import 包名.模块名形式导入包中模块，用包名.模块名.函数调用函数
4.主程序 指启动一个程序的代码，包含主程序的模块的模块空间就是全局名字空间
'''
